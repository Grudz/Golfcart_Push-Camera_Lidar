#! /usr/bin/env python
PACKAGE='golfcart_push'

from dynamic_reconfigure.msg import SensorLevels
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# HSV Example Node
#       Name          Type   Level 		Description               Default   Min   Max
gen.add("demo_h_center",   int_t, 0,       "Hue threshold center",   120,      0,    180)
gen.add("demo_h_width",    int_t, 0,       "Hue threshold width",    10,       1,    90)
gen.add("demo_s_thres",    int_t, 0,       "Saturation threshold",   150,      0,    255)
gen.add("demo_v_thres",    int_t, 0,       "Value threshold",        200,      0,    255)

# Lidar Node
#       Name                        Type       Lvl    Description                                          Default     Min     Max
gen.add("x_min",                    double_t,  0,     "Region of interest",                                -1.0,       -10.0,    0.0)
gen.add("x_max",                    double_t,  0,     "Region of interest",                                 5.0,      0.0,     100.0)
gen.add("y_min",                    double_t,  0,     "Region of interest",                                -11.0,     -100.0,   -50.0)
gen.add("y_max",                    double_t,  0,     "Region of interest",                                 -1.0,      -49.0,     100.0)
gen.add("z_min",                    double_t,  0,     "Region of interest",                                -2.0,      -1000.0,   0.0)
gen.add("z_max",                    double_t,  0,     "Region of interest",                                 10,         0.0,     1000.0)
gen.add("i_min",                    double_t,  0,     "Region of interest",                                 0.0,      -10.0,   0.0)
gen.add("i_max",                    double_t,  0,     "Region of interest",                                 1.5,        0.0,     5.0)
gen.add("sor_mean",                 double_t,  0,     "Number of nearby points to examine",                 5.0,      0.0,   100.0)
gen.add("sor_stddev",               double_t,  0,     "std dev thresh to delete points",                    0.2,       0.01,     5.0)
gen.add("voxel_size",               double_t,  0,     "Downsampling voxel size",                            0.3,       0.01,    1.0)
gen.add("cluster_tol",              double_t,  0,     "Distance to include point in cluster",               1.8,         0.001,   5.0)
gen.add("min_cluster_size",         int_t,     0,     "Minimum allowed number of points in a cluster",      5,         1,       500)
gen.add("max_cluster_size",         int_t,     0,     "Maximum allowed number of points in a cluster",      90,       1,       600)
gen.add("tf_increment",       double_t,  0,     "Distance to update in timer",                     0.007,      0.0,    0.5)
gen.add("z_large",       double_t,  0,     "Scale thresh Z",                     0.2,      0.0,    5.0)


# Camera Node
#       Name                Type      Level     Description                             Default   Min     Max
gen.add("h_center",         int_t,    0,        "Hue threshold center",                 113,       0,      180)
gen.add("h_width",          int_t,    0,        "Hue threshold width",                  41,        1,      90)
gen.add("val_thres",        int_t,    0,        "Value threshold",                      200,      0,      255)
gen.add("sat_thres",        int_t,    0,        "Saturation threshold",                 100,       0,      255)
gen.add("scale_factor",     double_t,    0,        "Manually project camera",          -4.1,       -50,     10)
gen.add("cam_frame_x",     double_t,    0,       "Manually project camera intrinsic x", 0.0,       -10,     10)
gen.add("cam_frame_y",     double_t,    0,       "Manually project camera instrinsic y", -3.4,       -10,     10)
gen.add("cam_x_min",       double_t,  0,     "Region of interest",                      -4.0,       -10.0,    10.0)
gen.add("cam_x_max",       double_t,  0,     "Region of interest",                       0.5,      -10.0,    10.0)
gen.add("cam_y_min",       double_t,  0,     "Region of interest",                       -6.0,     -10.0,    10.0)
gen.add("cam_y_max",       double_t,  0,     "Region of interest",                       -3.2,     -10.0,    10.0)
gen.add("cam_z_min",       double_t,  0,     "Region of interest",                      -2.0,      -10.0,    10.0)
gen.add("cam_z_max",       double_t,  0,     "Region of interest",                       10.0,     0.0,    20.0)


#gen.add("mask_height",      int_t,    0,        "Mask height",                          296,      0,      767)
#gen.add("cluster_tol",      double_t, 0,        "Distance to include point in cluster", 3.0,      0.1,    10.0)
#gen.add("min_cluster_size", int_t,    0,        "Minimum points in a cluster",          20,       1,      1000)
#gen.add("max_cluster_size", int_t,    0,        "Maximum points in a cluster",          500,      100,    2000)
#gen.add("fit_order",        int_t,    0,        "Polynomial order for curve fitting",   2,        1,      6)
#gen.add("rms_tolerance",    double_t, 0,        "RMS error threshold",                  0.2,      0.001,  10.0)

exit(gen.generate(PACKAGE, PACKAGE, "GolfcartPush"))
